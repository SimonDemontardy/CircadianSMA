import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import pandas as pd
from scipy.optimize import linprog

# ğŸ”¹ ParamÃ¨tres des taux mÃ©taboliques (ajuster selon le modÃ¨le)
k1, k2, k3, k4 = 0.5, 0.3, 0.2, 0.4  # Glycolyse et Cycle de Krebs
k5, k6, k7 = 0.2, 0.3, 0.1  # GlycogenÃ¨se, GlycogÃ©nolyse, NÃ©oglucogenÃ¨se
k8 = 0.2  # Consommation d'ATP

# ğŸ”¹ ModÃ¨le des Ã©quations diffÃ©rentielles
def metabolic_model(y, t):
    Glucose, GlycogÃ¨ne, Pyruvate, ATP, AMPK = y

    # ğŸ”¹ Activation de l'AMPK si ATP est bas
    if ATP < 1.5:
        AMPK = 1
    else:
        AMPK = 0

    # ğŸ”¹ Flux mÃ©taboliques
    dGlucose_dt = -k1 * Glucose + k6 * GlycogÃ¨ne + (k7 * Pyruvate if AMPK else 0)
    dGlycogÃ¨ne_dt = k5 * Glucose - k6 * GlycogÃ¨ne
    dPyruvate_dt = k2 * Glucose - k3 * Pyruvate
    dATP_dt = k4 * Pyruvate - k8 * ATP  # ATP produit par le cycle de Krebs, consommÃ© passivement

    return [dGlucose_dt, dGlycogÃ¨ne_dt, dPyruvate_dt, dATP_dt, AMPK]

# ğŸ”¹ Conditions initiales (Glucose, GlycogÃ¨ne, Pyruvate, ATP, AMPK)
y0 = [5.0, 8.0, 2.0, 3.0, 0]

# ğŸ”¹ Simulation sur 100 unitÃ©s de temps
t = np.linspace(0, 100, 500)
solution = odeint(metabolic_model, y0, t)

# ğŸ”¹ Extraction des solutions
Glucose_sol, GlycogÃ¨ne_sol, Pyruvate_sol, ATP_sol, AMPK_sol = solution.T

# ğŸ”¹ Affichage des rÃ©sultats
plt.figure(figsize=(10, 6))
plt.plot(t, Glucose_sol, label="Glucose", linewidth=2)
plt.plot(t, GlycogÃ¨ne_sol, label="GlycogÃ¨ne", linewidth=2)
plt.plot(t, Pyruvate_sol, label="Pyruvate", linewidth=2)
plt.plot(t, ATP_sol, label="ATP", linewidth=2)
plt.legend()
plt.xlabel("Temps")
plt.ylabel("Concentration")
plt.title("Ã‰volution des mÃ©tabolites en continu")
plt.grid()
plt.show()

# ğŸ”¹ DÃ©finition de la matrice stÅ“chiomÃ©trique
S = np.array([
    [-1,  0, -1, +1, +1,  0],  # Glucose
    [ 0,  0, +1, -1,  0,  0],  # GlycogÃ¨ne
    [+1, -1,  0,  0, -1,  0],  # Pyruvate
    [+1, +1,  0,  0,  0, -1]   # ATP
])

# ğŸ”¹ DÃ©finition des noms des rÃ©actions
reactions = ["Glycolyse", "Cycle Krebs", "GlycogenÃ¨se", "GlycogÃ©nolyse", "NÃ©oglucogenÃ¨se", "Consommation ATP"]

# ğŸ”¹ Fonction objectif : maximiser la production d'ATP
c = np.array([-0, -0, -0, -0, -0, -1])  # On maximise ATP, donc -1 car linprog fait une min

# ğŸ”¹ Contraintes : Ã‰quilibre des mÃ©tabolites (S @ v = 0)
A_eq = S
b_eq = np.zeros(S.shape[0])

# ğŸ”¹ DÃ©finition des bornes biologiques ajustÃ©es
v_max = [8, 8, 5, 5, 3, 8]  # Ajustement des flux max
bounds = [(0, v_max[i]) for i in range(len(reactions))]

# ğŸ”¹ Ajout de nouvelles contraintes biologiques
A_ub = np.array([
    [1, 0, 0, 0, 1, 0],  # Glycolyse + NÃ©oglucogenÃ¨se <= 5
    [-0.5, 1, 0, 0, 0, 0],  # Cycle Krebs >= 0.5 * Glycolyse
    [1, 1, 0, 0, 0, -1]   # ATP produit >= ATP consommÃ©
])
b_ub = np.array([5, 0, 0])

# ğŸ”¹ RÃ©solution de l'optimisation linÃ©aire
result = linprog(c, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')

# ğŸ”¹ Affichage des rÃ©sultats
if result.success:
    flux_values = result.x
    flux_df = pd.DataFrame({'RÃ©action': reactions, 'Flux optimal': flux_values})
    print(flux_df)
else:
    print("ProblÃ¨me d'optimisation :", result.message)